import{S as pe,i as fe,s as se,k as oe,q as ae,a as l,y as i,l as me,m as $e,r as le,h as n,c as o,z as m,n as ce,b as a,G as h,A as $,H as ue,g as r,d as p,B as f}from"../chunks/index.a7566c1a.js";import{H as c}from"../chunks/HeadingLink.20322812.js";import{C as j}from"../chunks/CodeBlock.a090ee9b.js";import{T as de}from"../chunks/Toc.c31a36b6.js";function ge(re){let s,ee,S,te,ne,H,u,N,d,O,g,D,y,E,w,A,C,P,v,W,x,z,b,G,k,L,_,Q,I,X,B,J,F,K,T,M,R,V,U,Y,q,Z;return u=new de({}),d=new c({props:{title:"Fetch collections"}}),g=new c({props:{title:"Fetch collection by name or id",tag:"h5"}}),y=new j({props:{language:"javascript",content:`
        const collection = $app.dao().findCollectionByNameOrId("example")
    `}}),w=new c({props:{title:"Fetch collections by type",tag:"h5"}}),C=new j({props:{language:"javascript",content:`
        const baseCollections = $app.dao().findCollectionsByType("base")
        const authCollections = $app.dao().findCollectionsByType("auth")
        const viewCollections = $app.dao().findCollectionsByType("view")
    `}}),v=new c({props:{title:"Create new collection"}}),x=new c({props:{title:"Create new collection WITHOUT data validations",tag:"h5"}}),b=new j({props:{language:"javascript",content:`
        const collection = new Collection({
            // the id is autogenerated, but you can set a specific one if you want to
            // id:      "...",
            name:       "example",
            type:       "base",
            listRule:   null,
            viewRule:   "@request.auth.id != ''",
            createRule: "",
            updateRule: "@request.auth.id != ''",
            deleteRule: null,
            schema:     [
                {
                    name:     "title",
                    type:     "text",
                    required: true,
                    options:  {
                        max: 10,
                    },
                },
                {
                    name:     "user",
                    type:     "relation",
                    required: true,
                    options:  {
                        maxSelect:     1,
                        collectionId:  "ae40239d2bc4477",
                        cascadeDelete: true,
                    },
                },
            ],
            indexes: [
                "CREATE UNIQUE INDEX idx_user ON example (user)"
            ],
            options: {}
        })

        $app.dao().saveCollection(collection)
    `}}),k=new c({props:{title:"Create new collection WITH data validations",tag:"h5"}}),_=new j({props:{language:"javascript",content:`
        const collection = new Collection()

        const form = new CollectionUpsertForm($app, collection)
        form.name = "example"
        form.type = "base"
        form.listRule = null
        form.viewRule = "@request.auth.id != ''"
        form.createRule = ""
        form.updateRule = "@request.auth.id != ''"
        form.deleteRule = null
        form.schema.addField(new SchemaField({
            name:     "title",
            type:     "text",
            required: true,
            options: {
                max: 10,
            },
        }))
        form.schema.addField(new SchemaField({
            name:     "user",
            type:     "relation",
            options: {
                maxSelect:     1,
                collectionId:  "ae40239d2bc4477",
                cascadeDelete: true,
            },
        }))

        ...

        // validate and submit (internally it calls $app.dao().saveCollection(collection) in a transaction)
        form.submit()
    `}}),I=new c({props:{title:"Update existing collection"}}),B=new c({props:{title:"Update collection WITHOUT data validations",tag:"h5"}}),F=new j({props:{language:"javascript",content:`
        const collection = $app.dao().findCollectionByNameOrId("example")

        // change the collection name
        collection.name = "example_update"

        // add new field
        collection.schema.addField(new SchemaField({
            name: "description",
            type: "text",
        }))

        $app.dao().saveCollection(collection)
    `}}),T=new c({props:{title:"Update collection WITH data validations",tag:"h5"}}),R=new j({props:{language:"javascript",content:`
        const collection = $app.dao().findCollectionByNameOrId("example")

        const form = new CollectionUpsertForm(app, collection)

        // change the collection name
        form.name = "example_update"

        // add new field
        form.schema.addField(new SchemaField{
            name: "description",
            type: "text",
        })

        // validate and submit (internally it calls $app.dao().saveCollection(collection) in a transaction)
        form.submit()
    `}}),U=new c({props:{title:"Delete collection"}}),q=new j({props:{language:"javascript",content:`
        const collection = $app.dao().findCollectionByNameOrId("example")

        $app.dao().deleteCollection(collection)
    `}}),{c(){s=oe("p"),ee=ae(`Collections are usually managed via the Admin UI, but there are some situations where you may want to
    create or edit a collection programmatically (usually as part of a
    `),S=oe("a"),te=ae("DB migration"),ne=ae(`). PocketBase exposes several helpers to simplify the
    Collection model operations.`),H=l(),i(u.$$.fragment),N=l(),i(d.$$.fragment),O=l(),i(g.$$.fragment),D=l(),i(y.$$.fragment),E=l(),i(w.$$.fragment),A=l(),i(C.$$.fragment),P=l(),i(v.$$.fragment),W=l(),i(x.$$.fragment),z=l(),i(b.$$.fragment),G=l(),i(k.$$.fragment),L=l(),i(_.$$.fragment),Q=l(),i(I.$$.fragment),X=l(),i(B.$$.fragment),J=l(),i(F.$$.fragment),K=l(),i(T.$$.fragment),M=l(),i(R.$$.fragment),V=l(),i(U.$$.fragment),Y=l(),i(q.$$.fragment),this.h()},l(e){s=me(e,"P",{});var t=$e(s);ee=le(t,`Collections are usually managed via the Admin UI, but there are some situations where you may want to
    create or edit a collection programmatically (usually as part of a
    `),S=me(t,"A",{href:!0});var ie=$e(S);te=le(ie,"DB migration"),ie.forEach(n),ne=le(t,`). PocketBase exposes several helpers to simplify the
    Collection model operations.`),t.forEach(n),H=o(e),m(u.$$.fragment,e),N=o(e),m(d.$$.fragment,e),O=o(e),m(g.$$.fragment,e),D=o(e),m(y.$$.fragment,e),E=o(e),m(w.$$.fragment,e),A=o(e),m(C.$$.fragment,e),P=o(e),m(v.$$.fragment,e),W=o(e),m(x.$$.fragment,e),z=o(e),m(b.$$.fragment,e),G=o(e),m(k.$$.fragment,e),L=o(e),m(_.$$.fragment,e),Q=o(e),m(I.$$.fragment,e),X=o(e),m(B.$$.fragment,e),J=o(e),m(F.$$.fragment,e),K=o(e),m(T.$$.fragment,e),M=o(e),m(R.$$.fragment,e),V=o(e),m(U.$$.fragment,e),Y=o(e),m(q.$$.fragment,e),this.h()},h(){ce(S,"href","/docs/js-migrations")},m(e,t){a(e,s,t),h(s,ee),h(s,S),h(S,te),h(s,ne),a(e,H,t),$(u,e,t),a(e,N,t),$(d,e,t),a(e,O,t),$(g,e,t),a(e,D,t),$(y,e,t),a(e,E,t),$(w,e,t),a(e,A,t),$(C,e,t),a(e,P,t),$(v,e,t),a(e,W,t),$(x,e,t),a(e,z,t),$(b,e,t),a(e,G,t),$(k,e,t),a(e,L,t),$(_,e,t),a(e,Q,t),$(I,e,t),a(e,X,t),$(B,e,t),a(e,J,t),$(F,e,t),a(e,K,t),$(T,e,t),a(e,M,t),$(R,e,t),a(e,V,t),$(U,e,t),a(e,Y,t),$(q,e,t),Z=!0},p:ue,i(e){Z||(r(u.$$.fragment,e),r(d.$$.fragment,e),r(g.$$.fragment,e),r(y.$$.fragment,e),r(w.$$.fragment,e),r(C.$$.fragment,e),r(v.$$.fragment,e),r(x.$$.fragment,e),r(b.$$.fragment,e),r(k.$$.fragment,e),r(_.$$.fragment,e),r(I.$$.fragment,e),r(B.$$.fragment,e),r(F.$$.fragment,e),r(T.$$.fragment,e),r(R.$$.fragment,e),r(U.$$.fragment,e),r(q.$$.fragment,e),Z=!0)},o(e){p(u.$$.fragment,e),p(d.$$.fragment,e),p(g.$$.fragment,e),p(y.$$.fragment,e),p(w.$$.fragment,e),p(C.$$.fragment,e),p(v.$$.fragment,e),p(x.$$.fragment,e),p(b.$$.fragment,e),p(k.$$.fragment,e),p(_.$$.fragment,e),p(I.$$.fragment,e),p(B.$$.fragment,e),p(F.$$.fragment,e),p(T.$$.fragment,e),p(R.$$.fragment,e),p(U.$$.fragment,e),p(q.$$.fragment,e),Z=!1},d(e){e&&n(s),e&&n(H),f(u,e),e&&n(N),f(d,e),e&&n(O),f(g,e),e&&n(D),f(y,e),e&&n(E),f(w,e),e&&n(A),f(C,e),e&&n(P),f(v,e),e&&n(W),f(x,e),e&&n(z),f(b,e),e&&n(G),f(k,e),e&&n(L),f(_,e),e&&n(Q),f(I,e),e&&n(X),f(B,e),e&&n(J),f(F,e),e&&n(K),f(T,e),e&&n(M),f(R,e),e&&n(V),f(U,e),e&&n(Y),f(q,e)}}}class xe extends pe{constructor(s){super(),fe(this,s,null,ge,se,{})}}export{xe as component};
