import{S as se,i as $e,s as fe,k as ne,q as le,a as o,y as a,l as re,m as me,r as oe,h as i,c as n,z as r,n as ce,b as l,G as Z,A as m,H as ue,g as p,d as s,B as $}from"../chunks/index.a7566c1a.js";import{H as c}from"../chunks/HeadingLink.20322812.js";import{C as B}from"../chunks/CodeBlock.a090ee9b.js";import{T as ye}from"../chunks/Toc.c31a36b6.js";function ge(pe){let f,ee,I,te,ie,O,u,P,y,U,g,A,d,q,b,H,k,E,C,M,T,W,w,L,x,V,h,z,F,G,S,J,D,Q,N,X,R,j,_,K,v,Y;return u=new ye({}),y=new c({props:{title:"Fetch collections"}}),g=new c({props:{title:"Fetch collection by name or id",tag:"h5"}}),d=new B({props:{language:"go",content:`
        collection, err := app.Dao().FindCollectionByNameOrId("example")
    `}}),b=new c({props:{title:"Fetch collections by type",tag:"h5"}}),k=new B({props:{language:"go",content:`
        baseCollections, err := app.Dao().FindCollectionsByType(models.CollectionTypeBase)

        authCollections, err := app.Dao().FindCollectionsByType(models.CollectionTypeAuth)

        viewCollections, err := app.Dao().FindCollectionsByType(models.CollectionTypeView)
    `}}),C=new c({props:{title:"Create new collection"}}),T=new c({props:{title:"Create new collection WITHOUT data validations",tag:"h5"}}),w=new B({props:{language:"go",content:`
        import (
            "github.com/pocketbase/pocketbase/models"
            "github.com/pocketbase/pocketbase/models/schema"
            "github.com/pocketbase/pocketbase/tools/types"
        )

        ...

        collection := &models.Collection{
            Name:       "example",
            Type:       models.CollectionTypeBase,
            ListRule:   nil,
            ViewRule:   types.Pointer("@request.auth.id != ''"),
            CreateRule: types.Pointer(""),
            UpdateRule: types.Pointer("@request.auth.id != ''"),
            DeleteRule: nil,
            Schema:     schema.NewSchema(
                &schema.SchemaField{
                    Name:     "title",
                    Type:     schema.FieldTypeText,
                    Required: true,
                    Options:  &schema.TextOptions{
                        Max: types.Pointer(10),
                    },
                },
                &schema.SchemaField{
                    Name:     "user",
                    Type:     schema.FieldTypeRelation,
                    Required: true,
                    Options:  &schema.RelationOptions{
                        MaxSelect:     types.Pointer(1),
                        CollectionId:  "ae40239d2bc4477",
                        CascadeDelete: true,
                    },
                },
            ),
            Indexes: types.JsonArray[string]{
                "CREATE UNIQUE INDEX idx_user ON example (user)",
            },
        }

        // the id is autogenerated, but you can set a specific one if you want to:
        // collection.SetId("...")

        if err := app.Dao().SaveCollection(collection); err != nil {
            return err
        }
    `}}),x=new c({props:{title:"Create new collection WITH data validations",tag:"h5"}}),h=new B({props:{language:"go",content:`
        import (
            "github.com/pocketbase/pocketbase/forms"
            "github.com/pocketbase/pocketbase/models"
            "github.com/pocketbase/pocketbase/models/schema"
            "github.com/pocketbase/pocketbase/tools/types"
        )

        ...

        collection := &models.Collection{}

        form := forms.NewCollectionUpsert(app, collection)
        form.Name = "example"
        form.Type = models.CollectionTypeBase
        form.ListRule = nil
        form.ViewRule = types.Pointer("@request.auth.id != ''")
        form.CreateRule = types.Pointer("")
        form.UpdateRule = types.Pointer("@request.auth.id != ''")
        form.DeleteRule = nil
        form.Schema.AddField(&schema.SchemaField{
            Name:     "title",
            Type:     schema.FieldTypeText,
            Required: true,
            Options: &schema.TextOptions{
                Max: types.Pointer(10),
            },
        })
        form.Schema.AddField(&schema.SchemaField{
            Name:     "user",
            Type:     schema.FieldTypeRelation,
            Required: true,
            Options: &schema.RelationOptions{
                MaxSelect:     types.Pointer(1),
                CollectionId:  "ae40239d2bc4477",
                CascadeDelete: true,
            },
        })

        // validate and submit (internally it calls app.Dao().SaveCollection(collection) in a transaction)
        if err := form.Submit(); err != nil {
            return err
        }
    `}}),F=new c({props:{title:"Update existing collection"}}),S=new c({props:{title:"Update collection WITHOUT data validations",tag:"h5"}}),D=new B({props:{language:"go",content:`
        import (
            "github.com/pocketbase/pocketbase/models/schema"
        )

        ...

        collection, err := app.Dao().FindCollectionByNameOrId("example")
        if err != nil {
            return err
        }

        // change the collection name
        collection.Name = "example_update"

        // add new field
        collection.Schema.AddField(&schema.SchemaField{
            Name: "description",
            Type: schema.FieldTypeText,
        })

        if err := app.Dao().SaveCollection(collection); err != nil {
            return err
        }
    `}}),N=new c({props:{title:"Update collection WITH data validations",tag:"h5"}}),R=new B({props:{language:"go",content:`
        import (
            "github.com/pocketbase/pocketbase/forms"
            "github.com/pocketbase/pocketbase/models/schema"
        )

        ...

        collection, err := app.Dao().FindCollectionByNameOrId("example")
        if err != nil {
            return err
        }

        form := forms.NewCollectionUpsert(app, collection)

        // change the collection name
        form.Name = "example_update"

        // add new field
        form.Schema.AddField(&schema.SchemaField{
            Name: "description",
            Type: schema.FieldTypeText,
        })

        // validate and submit (internally it calls app.Dao().SaveCollection(collection) in a transaction)
        if err := form.Submit(); err != nil {
            return err
        }
    `}}),_=new c({props:{title:"Delete collection"}}),v=new B({props:{language:"go",content:`
        collection, err := app.Dao().FindCollectionByNameOrId("example")
        if err != nil {
            return err
        }

        if err := app.Dao().DeleteCollection(collection); err != nil {
            return err
        }
    `}}),{c(){f=ne("p"),ee=le(`Collections are usually managed via the Admin UI, but there are some situations where you may want to
    create or edit a collection programmatically (usually as part of a
    `),I=ne("a"),te=le("DB migration"),ie=le(`). PocketBase exposes several helpers to simplify the
    Collection model operations.`),O=o(),a(u.$$.fragment),P=o(),a(y.$$.fragment),U=o(),a(g.$$.fragment),A=o(),a(d.$$.fragment),q=o(),a(b.$$.fragment),H=o(),a(k.$$.fragment),E=o(),a(C.$$.fragment),M=o(),a(T.$$.fragment),W=o(),a(w.$$.fragment),L=o(),a(x.$$.fragment),V=o(),a(h.$$.fragment),z=o(),a(F.$$.fragment),G=o(),a(S.$$.fragment),J=o(),a(D.$$.fragment),Q=o(),a(N.$$.fragment),X=o(),a(R.$$.fragment),j=o(),a(_.$$.fragment),K=o(),a(v.$$.fragment),this.h()},l(e){f=re(e,"P",{});var t=me(f);ee=oe(t,`Collections are usually managed via the Admin UI, but there are some situations where you may want to
    create or edit a collection programmatically (usually as part of a
    `),I=re(t,"A",{href:!0});var ae=me(I);te=oe(ae,"DB migration"),ae.forEach(i),ie=oe(t,`). PocketBase exposes several helpers to simplify the
    Collection model operations.`),t.forEach(i),O=n(e),r(u.$$.fragment,e),P=n(e),r(y.$$.fragment,e),U=n(e),r(g.$$.fragment,e),A=n(e),r(d.$$.fragment,e),q=n(e),r(b.$$.fragment,e),H=n(e),r(k.$$.fragment,e),E=n(e),r(C.$$.fragment,e),M=n(e),r(T.$$.fragment,e),W=n(e),r(w.$$.fragment,e),L=n(e),r(x.$$.fragment,e),V=n(e),r(h.$$.fragment,e),z=n(e),r(F.$$.fragment,e),G=n(e),r(S.$$.fragment,e),J=n(e),r(D.$$.fragment,e),Q=n(e),r(N.$$.fragment,e),X=n(e),r(R.$$.fragment,e),j=n(e),r(_.$$.fragment,e),K=n(e),r(v.$$.fragment,e),this.h()},h(){ce(I,"href","/docs/go-migrations")},m(e,t){l(e,f,t),Z(f,ee),Z(f,I),Z(I,te),Z(f,ie),l(e,O,t),m(u,e,t),l(e,P,t),m(y,e,t),l(e,U,t),m(g,e,t),l(e,A,t),m(d,e,t),l(e,q,t),m(b,e,t),l(e,H,t),m(k,e,t),l(e,E,t),m(C,e,t),l(e,M,t),m(T,e,t),l(e,W,t),m(w,e,t),l(e,L,t),m(x,e,t),l(e,V,t),m(h,e,t),l(e,z,t),m(F,e,t),l(e,G,t),m(S,e,t),l(e,J,t),m(D,e,t),l(e,Q,t),m(N,e,t),l(e,X,t),m(R,e,t),l(e,j,t),m(_,e,t),l(e,K,t),m(v,e,t),Y=!0},p:ue,i(e){Y||(p(u.$$.fragment,e),p(y.$$.fragment,e),p(g.$$.fragment,e),p(d.$$.fragment,e),p(b.$$.fragment,e),p(k.$$.fragment,e),p(C.$$.fragment,e),p(T.$$.fragment,e),p(w.$$.fragment,e),p(x.$$.fragment,e),p(h.$$.fragment,e),p(F.$$.fragment,e),p(S.$$.fragment,e),p(D.$$.fragment,e),p(N.$$.fragment,e),p(R.$$.fragment,e),p(_.$$.fragment,e),p(v.$$.fragment,e),Y=!0)},o(e){s(u.$$.fragment,e),s(y.$$.fragment,e),s(g.$$.fragment,e),s(d.$$.fragment,e),s(b.$$.fragment,e),s(k.$$.fragment,e),s(C.$$.fragment,e),s(T.$$.fragment,e),s(w.$$.fragment,e),s(x.$$.fragment,e),s(h.$$.fragment,e),s(F.$$.fragment,e),s(S.$$.fragment,e),s(D.$$.fragment,e),s(N.$$.fragment,e),s(R.$$.fragment,e),s(_.$$.fragment,e),s(v.$$.fragment,e),Y=!1},d(e){e&&i(f),e&&i(O),$(u,e),e&&i(P),$(y,e),e&&i(U),$(g,e),e&&i(A),$(d,e),e&&i(q),$(b,e),e&&i(H),$(k,e),e&&i(E),$(C,e),e&&i(M),$(T,e),e&&i(W),$(w,e),e&&i(L),$(x,e),e&&i(V),$(h,e),e&&i(z),$(F,e),e&&i(G),$(S,e),e&&i(J),$(D,e),e&&i(Q),$(N,e),e&&i(X),$(R,e),e&&i(j),$(_,e),e&&i(K),$(v,e)}}}class Te extends se{constructor(f){super(),$e(this,f,null,ge,fe,{})}}export{Te as component};
